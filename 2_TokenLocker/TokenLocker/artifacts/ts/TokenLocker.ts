/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TokenLockerContractJson } from "../TokenLocker.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace TokenLockerTypes {
  export type Fields = {
    beneficiary: Address;
    durationMs: bigint;
    startMs: bigint;
    token: HexString;
  };

  export type State = ContractState<Fields>;

  export type ReleaseEvent = ContractEvent<{
    beneficiary: Address;
    token: HexString;
    releaseTime: bigint;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    release: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    release: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  TokenLockerInstance,
  TokenLockerTypes.Fields
> {
  encodeFields(fields: TokenLockerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { Release: 0 };
  consts = {
    ErrorCodes: {
      InvalidReleaseTime: BigInt("0"),
      InvalidWithdrawAmount: BigInt("1"),
    },
  };

  at(address: string): TokenLockerInstance {
    return new TokenLockerInstance(address);
  }

  tests = {
    release: async (
      params: Omit<
        TestContractParamsWithoutMaps<TokenLockerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "release", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: TokenLockerTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TokenLocker = new Factory(
  Contract.fromJson(
    TokenLockerContractJson,
    "",
    "d0258595ed54599e7694c37a1e0a23c000b578cdf0ba6982f484ed2ac5a17f56",
    []
  )
);
registerContract(TokenLocker);

// Use this class to interact with the blockchain
export class TokenLockerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TokenLockerTypes.State> {
    return fetchContractState(TokenLocker, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeReleaseEvent(
    options: EventSubscribeOptions<TokenLockerTypes.ReleaseEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      TokenLocker.contract,
      this,
      options,
      "Release",
      fromCount
    );
  }

  view = {
    release: async (
      params?: TokenLockerTypes.CallMethodParams<"release">
    ): Promise<TokenLockerTypes.CallMethodResult<"release">> => {
      return callMethod(
        TokenLocker,
        this,
        "release",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    release: async (
      params: TokenLockerTypes.SignExecuteMethodParams<"release">
    ): Promise<TokenLockerTypes.SignExecuteMethodResult<"release">> => {
      return signExecuteMethod(TokenLocker, this, "release", params);
    },
  };
}
