/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PaymentSplitContractJson } from "../PaymentSplit.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PaymentSplitTypes {
  export type Fields = {
    totalShares: bigint;
    totalReleased: bigint;
    payeesLength: bigint;
  };

  export type State = ContractState<Fields>;

  export type PayeeAddedEvent = ContractEvent<{
    account: Address;
    shares: bigint;
  }>;
  export type PaymentReleasedEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;
  export type PaymentReceivedEvent = ContractEvent<{
    account: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    addPayee: {
      params: CallContractParams<{ account: Address; shares: bigint }>;
      result: CallContractResult<null>;
    };
    pendingPayment: {
      params: CallContractParams<{
        account: Address;
        totalReceived: bigint;
        alreadyReleased: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    releasable: {
      params: CallContractParams<{ account: Address }>;
      result: CallContractResult<bigint>;
    };
    release: {
      params: CallContractParams<{ account: Address }>;
      result: CallContractResult<null>;
    };
    deposit: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    addPayee: {
      params: SignExecuteContractMethodParams<{
        account: Address;
        shares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    pendingPayment: {
      params: SignExecuteContractMethodParams<{
        account: Address;
        totalReceived: bigint;
        alreadyReleased: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    releasable: {
      params: SignExecuteContractMethodParams<{ account: Address }>;
      result: SignExecuteScriptTxResult;
    };
    release: {
      params: SignExecuteContractMethodParams<{ account: Address }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    sharesMapping?: Map<Address, bigint>;
    releasedMapping?: Map<Address, bigint>;
    payeesMapping?: Map<bigint, Address>;
  };
}

class Factory extends ContractFactory<
  PaymentSplitInstance,
  PaymentSplitTypes.Fields
> {
  encodeFields(fields: PaymentSplitTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { PayeeAdded: 0, PaymentReleased: 1, PaymentReceived: 2 };
  consts = {
    ErrorCodes: {
      SharesAreZero: BigInt("1"),
      AccountAlreadyHasShares: BigInt("2"),
      AccountHasNoShares: BigInt("3"),
      AccountIsNotDuePayment: BigInt("4"),
    },
  };

  at(address: string): PaymentSplitInstance {
    return new PaymentSplitInstance(address);
  }

  tests = {
    addPayee: async (
      params: TestContractParams<
        PaymentSplitTypes.Fields,
        { account: Address; shares: bigint },
        PaymentSplitTypes.Maps
      >
    ): Promise<TestContractResult<null, PaymentSplitTypes.Maps>> => {
      return testMethod(this, "addPayee", params, getContractByCodeHash);
    },
    pendingPayment: async (
      params: TestContractParams<
        PaymentSplitTypes.Fields,
        { account: Address; totalReceived: bigint; alreadyReleased: bigint },
        PaymentSplitTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PaymentSplitTypes.Maps>> => {
      return testMethod(this, "pendingPayment", params, getContractByCodeHash);
    },
    releasable: async (
      params: TestContractParams<
        PaymentSplitTypes.Fields,
        { account: Address },
        PaymentSplitTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PaymentSplitTypes.Maps>> => {
      return testMethod(this, "releasable", params, getContractByCodeHash);
    },
    release: async (
      params: TestContractParams<
        PaymentSplitTypes.Fields,
        { account: Address },
        PaymentSplitTypes.Maps
      >
    ): Promise<TestContractResult<null, PaymentSplitTypes.Maps>> => {
      return testMethod(this, "release", params, getContractByCodeHash);
    },
    deposit: async (
      params: TestContractParams<
        PaymentSplitTypes.Fields,
        { amount: bigint },
        PaymentSplitTypes.Maps
      >
    ): Promise<TestContractResult<null, PaymentSplitTypes.Maps>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PaymentSplitTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: PaymentSplitTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const PaymentSplit = new Factory(
  Contract.fromJson(
    PaymentSplitContractJson,
    "=6-2+9e=2+c=1-1=1-2=1-1=2-1=2-1+834=1+9c=12-2+33=102+7a7e0214696e73657274206174206d617020706174683a2000=62+7a7e0214696e73657274206174206d617020706174683a2000=285-1+8=126+7a7e0214696e73657274206174206d617020706174683a2000=84",
    "baaecd7e2887224ce3c9a1246194131cb9d79a35713f22816640654468f2d90e",
    []
  )
);
registerContract(PaymentSplit);

// Use this class to interact with the blockchain
export class PaymentSplitInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    sharesMapping: new RalphMap<Address, bigint>(
      PaymentSplit.contract,
      this.contractId,
      "sharesMapping"
    ),
    releasedMapping: new RalphMap<Address, bigint>(
      PaymentSplit.contract,
      this.contractId,
      "releasedMapping"
    ),
    payeesMapping: new RalphMap<bigint, Address>(
      PaymentSplit.contract,
      this.contractId,
      "payeesMapping"
    ),
  };

  async fetchState(): Promise<PaymentSplitTypes.State> {
    return fetchContractState(PaymentSplit, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePayeeAddedEvent(
    options: EventSubscribeOptions<PaymentSplitTypes.PayeeAddedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PaymentSplit.contract,
      this,
      options,
      "PayeeAdded",
      fromCount
    );
  }

  subscribePaymentReleasedEvent(
    options: EventSubscribeOptions<PaymentSplitTypes.PaymentReleasedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PaymentSplit.contract,
      this,
      options,
      "PaymentReleased",
      fromCount
    );
  }

  subscribePaymentReceivedEvent(
    options: EventSubscribeOptions<PaymentSplitTypes.PaymentReceivedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PaymentSplit.contract,
      this,
      options,
      "PaymentReceived",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PaymentSplitTypes.PayeeAddedEvent
      | PaymentSplitTypes.PaymentReleasedEvent
      | PaymentSplitTypes.PaymentReceivedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PaymentSplit.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    addPayee: async (
      params: PaymentSplitTypes.CallMethodParams<"addPayee">
    ): Promise<PaymentSplitTypes.CallMethodResult<"addPayee">> => {
      return callMethod(
        PaymentSplit,
        this,
        "addPayee",
        params,
        getContractByCodeHash
      );
    },
    pendingPayment: async (
      params: PaymentSplitTypes.CallMethodParams<"pendingPayment">
    ): Promise<PaymentSplitTypes.CallMethodResult<"pendingPayment">> => {
      return callMethod(
        PaymentSplit,
        this,
        "pendingPayment",
        params,
        getContractByCodeHash
      );
    },
    releasable: async (
      params: PaymentSplitTypes.CallMethodParams<"releasable">
    ): Promise<PaymentSplitTypes.CallMethodResult<"releasable">> => {
      return callMethod(
        PaymentSplit,
        this,
        "releasable",
        params,
        getContractByCodeHash
      );
    },
    release: async (
      params: PaymentSplitTypes.CallMethodParams<"release">
    ): Promise<PaymentSplitTypes.CallMethodResult<"release">> => {
      return callMethod(
        PaymentSplit,
        this,
        "release",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: PaymentSplitTypes.CallMethodParams<"deposit">
    ): Promise<PaymentSplitTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        PaymentSplit,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    addPayee: async (
      params: PaymentSplitTypes.SignExecuteMethodParams<"addPayee">
    ): Promise<PaymentSplitTypes.SignExecuteMethodResult<"addPayee">> => {
      return signExecuteMethod(PaymentSplit, this, "addPayee", params);
    },
    pendingPayment: async (
      params: PaymentSplitTypes.SignExecuteMethodParams<"pendingPayment">
    ): Promise<PaymentSplitTypes.SignExecuteMethodResult<"pendingPayment">> => {
      return signExecuteMethod(PaymentSplit, this, "pendingPayment", params);
    },
    releasable: async (
      params: PaymentSplitTypes.SignExecuteMethodParams<"releasable">
    ): Promise<PaymentSplitTypes.SignExecuteMethodResult<"releasable">> => {
      return signExecuteMethod(PaymentSplit, this, "releasable", params);
    },
    release: async (
      params: PaymentSplitTypes.SignExecuteMethodParams<"release">
    ): Promise<PaymentSplitTypes.SignExecuteMethodResult<"release">> => {
      return signExecuteMethod(PaymentSplit, this, "release", params);
    },
    deposit: async (
      params: PaymentSplitTypes.SignExecuteMethodParams<"deposit">
    ): Promise<PaymentSplitTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(PaymentSplit, this, "deposit", params);
    },
  };

  async multicall<Calls extends PaymentSplitTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PaymentSplitTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PaymentSplitTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PaymentSplitTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PaymentSplitTypes.MultiCallParams
      | PaymentSplitTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PaymentSplit,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
